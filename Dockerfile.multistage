# Multi-stage Dockerfile to avoid npm integrity issues
FROM node:18-alpine AS builder

# Install build dependencies
RUN apk add --no-cache python3 make g++

# Create app directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install ALL dependencies (including dev)
RUN npm cache clean --force && \
    npm install --verbose

# Copy source code
COPY . .

# Production stage
FROM node:18-alpine AS production

# Install runtime dependencies
RUN apk add --no-cache ffmpeg curl

# Create app directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install only production dependencies
RUN npm cache clean --force && \
    npm install --omit=dev --verbose && \
    npm cache clean --force

# Copy built application from builder stage
COPY --from=builder /app/server.js ./
COPY --from=builder /app/public ./public/

# Create directories
RUN mkdir -p logs

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# Change ownership
RUN chown -R nodejs:nodejs /app

# Switch to non-root user
USER nodejs

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3000/api/status || exit 1

# Start the application
CMD ["node", "server.js"]